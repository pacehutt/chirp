import {
  SignIn,
  SignInButton,
  SignOutButton,
  SignUp,
  useUser,
} from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import { LoadingPage } from "~/components/loading";
import { useState } from "react";
import { toast } from "react-hot-toast";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();

  const [input, setInput] = useState("");

  const ctx = api.useContext();
  let toastId: string | undefined;
  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getAll.invalidate();
      toast.dismiss(toastId);
      toast.success("Posted!ü™Ñ", {
        style: {
          background: "rgb(31 41 55)",
          color: "white",
        },
      });
    },
    onError(error, variables, context) {
      const errorMessage = error.data?.zodError?.fieldErrors.content;
      toast.dismiss(toastId);
      if (errorMessage && errorMessage[0]) {
        toast.error(errorMessage[0] + "üòê", {
          style: {
            background: "rgb(31 41 55)",
            color: "white",
          },
        });
      } else {
        toast.error("Failed to post, try again later üõ†Ô∏è", {
          style: {
            background: "rgb(31 41 55)",
            color: "white",
          },
        });
      }
    },
  });
  console.log(user);

  if (!user) return null;

  return (
    <div className="my-2 flex w-full items-center justify-center gap-4">
      <Image
        src={user.profileImageUrl}
        alt="Profile Img"
        className="h-12 w-12 rounded-full"
        width={40}
        height={40}
      />
      <input
        type="text"
        placeholder="Type some emojis.."
        className="grow bg-transparent p-2 outline-none"
        value={input}
        onChange={(e) => setInput(e.target.value)}
      />
      <button
        disabled={isPosting}
        onClick={() => {
          mutate({ content: input });
          setInput("");
          toastId = toast.loading("Posting... üîÉ", {
            style: {
              background: "rgb(31 41 55)",
              color: "white",
            },
          });
        }}
        className="h-8 rounded-md bg-gray-800 px-3 text-sm text-white"
      >
        Post
      </button>
    </div>
  );
};

type PostWithUSer = RouterOutputs["posts"]["getAll"][number];
const PostView = ({ post, author }: PostWithUSer) => {
  return (
    <div key={post.id} className="flex gap-4 border-b border-slate-400 p-5">
      <Link href={`/@${author?.username || author.id}`}>
        <Image
          height={40}
          width={40}
          src={author.profileImageUrl}
          alt="profile image"
          className="h-12 w-12 rounded-full"
        />
      </Link>

      <div className="flex flex-col gap-1">
        <div className="font-bold-500 text-slate-500">
          <Link href={`/@${author?.username || author.id}`}>
            <span>@{author?.username || author.id}</span>
          </Link>
          <Link href={`/post/${post.id}`}>
            <span>¬∑ {dayjs(post.createdAt).fromNow()} </span>
          </Link>
        </div>
        <Link href={`/post/${post.id}`}>
          <div className="text-xl">{post.content}</div>
        </Link>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;

  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="flex flex-col">
      {data?.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const { isLoaded: userLoaded, isSignedIn } = useUser();
  // start fetching ASAP as once fetched it will be cached by react query
  api.posts.getAll.useQuery();

  //  return empty div is user not loaded
  if (!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Chirp</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center ">
        <div className="h-full w-full border-x border-slate-500 md:max-w-2xl">
          <div
            className="border-b border-slate-400 p-5"
            style={{
              color: "white",
            }}
          >
            {isSignedIn && <CreatePostWizard />}
            {!isSignedIn && <SignInButton />}
            {!!isSignedIn && (
              <div className="relative top-1 flex w-20 justify-center border border-slate-600 p-1">
                <SignOutButton />
              </div>
            )}
            <SignIn path="/sign-in" routing="path" signUpUrl="/sign-up" />
          </div>

          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
